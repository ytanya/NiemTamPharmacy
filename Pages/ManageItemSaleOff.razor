@page "/manage/itemsaleoff"


@using BlazorStore.Models
@using Microsoft.EntityFrameworkCore
@using BlazorStore.Data
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext _context


<div class="vertical-nav bg-white @active" id="sidebar">
    <SideNav></SideNav>
</div>

<!-- Page content holder -->
<div class="page-content pr-3 pl-3 pb-5 pt-0 mb-5  @active" id="content">

    <div class="container-fluid">
        <!-- Demo content -->
        <p class="lead">Admin System Management</p>

        <div class="separator"></div>

        <!--Begin Content-->

        @if (itemList is not null)
        {
            <div class="row">
                <div class="col-6">
                    <button class="btn btn-secondary text-white mb-4" @onclick="@(() => _dialog.Open())">Create new Item</button>
                    <br />
                    <br />
                    <div class="table-responsive">
                        <table class="table table-striped table-hover display responsive nowrap" cellspacing="0" id="itemSaleOffTable">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Name</th>
                                    <th>Sale Persent Amount</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in itemList)
                                {
                                    var currentSlug = item.Id;
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.Name</td>
                                        <td>@item.SalePersentAmount</td>
                                        <td>
                                            <a class="btn btn-primary text-white" style="cursor:pointer" @onclick="@(() => OpenEditDialog(currentSlug))">
                                                Edit
                                            </a>
                                            <a class="btn btn-danger text-white" style="cursor:pointer" @onclick="() => OpenDeleteDialog(currentSlug)">
                                                Delete
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Id</th>
                                    <th>Name</th>
                                    <th>Sale Persent Amount</th>
                                    <th></th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                </div>

            </div>
        }
        else
        {
            <div class="row">
                <div class="col">
                    <p>There is no item.</p>
                </div>
            </div>
        }


        <!--End Content-->
    </div>
    <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
    <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />

</div>
<!-- End demo content -->



<ModalDialog @ref="_dialog"
             OverlayOpacity="@(_overlayOpacity)"
             Width="@_modalWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Add New Sale Off</h4>
    </Header>
    <Content>
        <div class="container">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newBlogCategory" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p> Name</p>
                                        <input class="form-control" @bind="newBlogCategory.Name" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p>Sale Persent Amount</p>
                                        <input class="form-control" @bind="newBlogCategory.SalePersentAmount" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col text-center">
                                <button type="submit" class="btn btn-primary btn-block">Add New Category</button>
                            </div>
                        </div>
                        <br />
                    </EditForm>
                    <div class="row">
                        <div class="col">
                            <button class="btn btn-secondary btn-block" @onclick="CancelDialog">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Content>

</ModalDialog>


@* Edit and Delete Modal*@

<ModalDialog @ref="_dialogEdit"
             OverlayOpacity="@(_overlayOpacity)"
             Width="@_modalWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit Sale Off</h4>
    </Header>
    <Content>
        <div class="container">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentCategory" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p> Name</p>
                                        <input class="form-control" @bind="currentCategory.Name" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p>Sale Persent Amount</p>
                                        <input class="form-control" @bind="currentCategory.SalePersentAmount" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col text-center">
                                <button type="submit" class="btn btn-primary btn-block">Apply Changes</button>
                            </div>
                        </div>
                        <br />
                    </EditForm>
                    <div class="row">
                        <div class="col">
                            <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Content>

</ModalDialog>



@*Delete modal*@
<ModalDialog @ref="_dialogDelete"
             OverlayOpacity="@(_overlayOpacity)"
             Width="@_modalWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Delete Sale Off</h4>
    </Header>
    <Content>
        <div class="container">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentCategory" OnValidSubmit="Delete">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col text-center">
                                <p>Are You Sure You Want To Delete This Category?</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p> Name</p>
                                        <input readonly class="form-control" @bind="currentCategory.Name" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p>Sale Persent Amount</p>
                                        <input readonly class="form-control" @bind="currentCategory.SalePersentAmount" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col text-center">
                                <button type="submit" class="btn btn-primary btn-block">Delete Category</button>
                            </div>
                        </div>
                        <br />
                    </EditForm>
                    <div class="row">
                        <div class="col">
                            <button class="btn btn-secondary btn-block" @onclick="CancelDeleteDialog">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Content>

</ModalDialog>



@code {
    public string active;

    public void NavToggle()
    {
        if (active is null)
        {
            active = "active";
        }
        else
        {
            active = null;
        }
    }




    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalWitdth = 800;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;

    private ModalDialog _dialog;
    private ModalDialog _dialogEdit;
    private ModalDialog _dialogDelete;
    public Models.ItemSaleOff currentCategory = new();
    public Models.ItemSaleOff tempCategory = new();

    public Models.ItemSaleOff newBlogCategory = new();
    public List<Models.ItemSaleOff> itemList = new();
    public string CategoryName;
    private async Task OpenEditDialog(int id)
    {
        currentCategory = _context.ItemSaleOff.FirstOrDefault(b => b.Id == id);
        tempCategory = currentCategory;
        CategoryName = tempCategory.Name;
        await _dialogEdit.Open();
    }
    private async Task OpenDeleteDialog(int id)
    {
        currentCategory = _context.ItemSaleOff.FirstOrDefault(b => b.Id == id);
        tempCategory = currentCategory;
        await _dialogDelete.Open();
    }
    private async Task OpenDialog()
    {
        newBlogCategory = new();
        await _dialog.Open();
    }

    private async Task AcceptDialog()
    {
        //Dialog accepted code
        await _dialog.Close();
    }
    private async Task CancelDialog()
    {
        currentCategory = new();
        //Dialog cancelled code
        await _dialog.Close();
    }
    private async Task CancelEditDialog()
    {
        currentCategory = new();
        //Dialog cancelled code
        await _dialogEdit.Close();
    }
    private async Task CancelDeleteDialog()
    {
        currentCategory = new();
        //Dialog cancelled code
        await _dialogDelete.Close();
    }


    public async Task Add()
    {
        try
        {

            _context.Add(newBlogCategory);
            _context.SaveChanges();

            newBlogCategory = new();
            GetItems();
            await _dialog.Close();
            await JSRuntime.InvokeVoidAsync("AddingSuccess", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("SomethingWentWrong", null);
            throw;
        }
    }
    public async Task Edit()
    {
        try
        {
            currentCategory.Name = CategoryName;
            _context.Update(currentCategory);
            _context.SaveChanges();
            currentCategory = new();
            GetItems();
            await _dialogEdit.Close();
            await JSRuntime.InvokeVoidAsync("AddingSuccess", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("SomethingWentWrong", null);
            throw;
        }


    }


    private async Task Delete()
    {
        _context.Remove(currentCategory);

        _context.SaveChanges();

        currentCategory = new();
        GetItems();
        await _dialogDelete.Close();
        await JSRuntime.InvokeVoidAsync("AddingSuccess", null);

    }




    protected override void OnInitialized()
    {
        GetItems();
    }

    public void GetItems()
    {
        itemList = _context.ItemSaleOff.ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await JSRuntime.InvokeVoidAsync("runDataTable", null);
        }
    }
}
