@page "/process"
@using BlazorStore.Data
@using BlazorStore.Models
@using BlazorStore.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using Microsoft.AspNetCore.Routing;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Text.Encodings.Web;
@using System.Text;
@using System.Collections.Generic;
@inject ApplicationDbContext _context
@inject UserManager<CustomUser> _userManger
@inject IHttpContextAccessor _httpContextAccessor
@inject IEmailSender _emailSender
@inject ICanUserComment _canUserComment
@inject LinkGenerator _generator
@inject NavigationManager NavigationManager

@code {
    protected override async Task OnInitializedAsync()
    {
        var applicationDbContext = await _context.Orders.Include(o => o.Category)
                .Include(o => o.CustomUser)
                .Include(o => o.OrderStatus)
                .Include(o => o.Item)
                .OrderByDescending(o => o.Updated).ToListAsync();
        List<Order> orderList = new List<Order>();
        foreach (var item in applicationDbContext)
        {
            var trackingNumber = item.TrackingNumber;
            if (!orderList.Select(o => o.TrackingNumber).Contains(trackingNumber))
            {
                orderList.Add(item);
            }
        }

        await DeleteOrder180DayAgoAsync();

        var TrackingNumber = CreateTrackingNumber();

        var CartList = await _context.Cart.Where(i => i.CustomUserId == _userManger.GetUserId(_httpContextAccessor.HttpContext.User) && !i.IsSold)
            .Include(i => i.Category)
            .Include(i => i.CustomUser)
            .ToListAsync();

        var ReceivedStatus = _context.OrderStatuses.FirstOrDefault(o => o.Name == "Received").Id;
        var user = await _userManger.FindByIdAsync(CartList.First().CustomUserId);
        var currentTime = DateTime.Now;
        foreach (var items in CartList)
        {


            //update number of sold item
            var item_of_shop = _context.Item.FirstOrDefault(i => i.Id == items.ItemId);
            item_of_shop.Number_Of_Sold += 1;
            await _canUserComment.AddUserToItemAsync(user.Id, items.ItemId);
            _context.Update(item_of_shop);
            await _context.SaveChangesAsync();

            Order newOrder = new Order
            {
                TrackingNumber = TrackingNumber,
                Name = items.Name,
                Price = items.Price,
                CustomUserId = items.CustomUserId,
                CategoryId = items.CategoryId,
                ItemId = items.ItemId,
                Quantity = items.Quantity,
                IsSold = true,
                ImageData = items.ImageData,
                ContentType = items.ContentType,
                Date = currentTime,
                Notes = user.Notes,
                Slug = items.Slug,
                IsViewByOwner = false,
                OrderStatusId = ReceivedStatus,
                TrackingLink = "We are currently working on tracking link!",
                Created = currentTime,
                Updated = currentTime,
                FirstName = user.FirstName,
                LastName = user.LastName,
                PhoneNumber = user.PhoneNumber,
                Email = user.Email,
                Adress = user.Street,
                State = user.State,
                City = user.City,
                Zipcode = user.Zipcode
            };
            _context.Add(newOrder);
            await _context.SaveChangesAsync();

            _context.Cart.Remove(items);
            await _context.SaveChangesAsync();
        }





        var callbackUrl = NavigationManager.BaseUri + "Orders/TrackOrderDetails/" + TrackingNumber;



        await _emailSender.SendEmailAsync(user.Email, "Niệm Tâm Pharmacy received your order",
    $"<h1>You successfully placed an order on Niệm Tâm Pharmacy at {(currentTime).ToString("dd MMMM yyyy - hh:mm tt")}</h1> <br> <a style='background-color: #555555;border: none;color: white;padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;' href='{HtmlEncoder.Default.Encode(callbackUrl)}'>Clicking here to track your order</a>  <br> <h3>Your Tracking Number is: {TrackingNumber} </h3> <br>");


        await _emailSender.SendEmailAsync("info@tienphong.it", "New order has been placed at Niệm Tâm Pharmacy",
           $"<h1>A new order have been placed at {(currentTime).ToString("dd MMMM yyyy - hh:mm tt")}</h1> <br> <a style='background-color: #555555;border: none;color: white;padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;' href='{HtmlEncoder.Default.Encode(callbackUrl)}'>Clicking here to go to order</a>  <br> <h3>Tracking Number is: {TrackingNumber} </h3> <br>");

        NavigationManager.NavigateTo($"/success/{TrackingNumber}");
    }


    public async Task DeleteOrder180DayAgoAsync()
    {
        var currentTime = DateTimeOffset.Now;
        var StatusFinish = _context.OrderStatuses.FirstOrDefault(o => o.Name == "Finish").Id;
        var Order_Complete = await _context.Orders.Where(t => t.Updated >= currentTime.AddDays(-180) && t.OrderStatusId == StatusFinish).ToListAsync();
        foreach (var item2 in Order_Complete)
        {
            _context.Orders.Remove(item2);
        }
        await _context.SaveChangesAsync();
    }

    public string CreateTrackingNumber()
    {
        Random rand = new Random();
        var RandomNumber = Enumerable.Range(0, 10)
                                     .Select(i => new Tuple<int, int>(rand.Next(10), i))
                                     .OrderBy(i => i.Item1)
                                     .Select(i => i.Item2);
        var TrackingNumber = String.Join("", string.Join(";", RandomNumber).Split('@', ',', '.', ';', '\''));


        while (_context.Orders.Where(i => i.TrackingNumber == TrackingNumber).ToList().Count > 0)
        {
            RandomNumber = Enumerable.Range(0, 10)
                                     .Select(i => new Tuple<int, int>(rand.Next(10), i))
                                     .OrderBy(i => i.Item1)
                                     .Select(i => i.Item2);
            TrackingNumber = String.Join("", string.Join(";", RandomNumber).Split('@', ',', '.', ';', '\''));
        }
        return TrackingNumber;
    }
}
