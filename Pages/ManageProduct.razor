@page "/manage/products"
@using BlazorStore.Models
@using Microsoft.EntityFrameworkCore
@using BlazorStore.Data
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext _context
@using BlazorStore.Services
@inject IImageService _imageService
@inject ISlugService _slugService
@using System.IO
@using BlazingComponents.Summernote


<div class="vertical-nav bg-white @active" id="sidebar">
    <SideNav></SideNav>
</div>

<!-- Page content holder -->
<div class="page-content pr-3 pl-3 pb-5 pt-0 mb-5  @active" id="content">

    <div class="container-fluid">
        <!-- Demo content -->
        <p class="lead">Admin System Management</p>

        <div class="separator"></div>

        <!--Begin Content-->
        @if (itemList is not null)
        {
            <div class="row">
                <div class="col">

                    <button class="btn btn-secondary text-white mb-4" @onclick="@(() => OpenDialog())">Create new Item</button>
                    <br />
                    <br />
                    <table class="table table-striped table-hover" id="itemTable">
                        <thead>
                            <tr>
                                <th style="width:5%"></th>
                                <th style="width:10%">Name</th>
                                <th style="width:5%">Price</th>
                                <th style="width:5%">List Price</th>
                                <th style="width:5%">View</th>
                                <th style="width:5%">Number Of Sold</th>
                                <th style="width:5%">SaleOff</th>
                                <th style="width:5%">Status</th>
                                <th style="width:5%">Category</th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in itemList)
                            {
                                var currentSlug = item.Slug;
                                <tr>
                                     <td>
                                        <a class="btn btn-primary text-white" style="cursor:pointer" @onclick="@(() => OpenEditDialog(currentSlug))">
                                            Edit
                                        </a>
                                        <a class="btn btn-danger text-white" style="cursor:pointer" @onclick="() => OpenDeleteDialog(currentSlug)">
                                            Delete
                                        </a>
                                    </td>
                                    <td>@item.Name</td>
                                    <td>@item.Price</td>
                                    <td>@item.ListPrice(_context, item.Price, item.ItemSaleOffId)</td>
                                    <td>@item.ViewCount</td>
                                    <td>@item.Number_Of_Sold</td>
                                    <td>@item.ItemSaleOff.Name</td>
                                    <td>@item.ItemStatus.Name</td>
                                    <td>@item.Category.Name</td>
                                   
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th>Name</th>
                                <th>Price</th>
                                <th>List Price</th>
                                <th>View</th>
                                <th>Number Of Sold</th>
                                <th>SaleOff</th>
                                <th>Status</th>
                                <th>Category</th>
                                <th></th>
                            </tr>
                        </tfoot>
                    </table>

                </div>


            </div>
        }
        else
        {
            <div class="row">
                <div class="col">
                    <p>There is no item.</p>
                </div>
            </div>
        }



        <!--End Content-->
    </div>
    <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
    <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />

</div>
<!-- End demo content -->

<ModalDialog @ref="_dialog"
             OverlayOpacity="@(_overlayOpacity)"
             Width="@_modalWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Add New Product</h4>
    </Header>
    <Content>
        <div class="container">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Context="CategorySelect" Model="newBlogCategory" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <InputFile OnChange="@LoadFiles" />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p> Name</p>
                                        <input class="form-control" @bind="newBlogCategory.Name" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p>Description</p>
                                        <input class="form-control" @bind="newBlogCategory.Description" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>Content</p>
                                <RadzenHtmlEditor style="height: 350px; margin-bottom: 1rem;" @bind-Value=newBlogCategory.Content />

                                @*<Editor @bind-content="@newBlogCategory.Content">

                                </Editor>*@
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col">
                                <p>Price</p>
                                <input class="form-control" @bind="newBlogCategory.Price" />
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col">
                                <p>Select Item Sale Off</p>
                                <RadzenDropDown AllowClear="true" Name="ItemSaleOffId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@newBlogCategory.ItemSaleOffId Placeholder="Select Category..."
                                                Style="width:100%" Data=@itemSaleOffList TextProperty="Name" ValueProperty="Id" Change=@(args => OnChangeSaleOff(args))>
                                    <Template>
                                        Sale Off: @((context as ItemSaleOff).Name)
                                    </Template>
                                </RadzenDropDown>
                            </div>
                            <div class="col">
                                <p>Select Item Status</p>
                                <RadzenDropDown AllowClear="true" Name="ItemStatusId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@newBlogCategory.ItemStatusId Placeholder="Select Category..."
                                                Style="width:100%" Data=@itemStatusList TextProperty="Name" ValueProperty="Id" Change=@(args => OnChangeStatus(args))>
                                    <Template>
                                        Status: @((context as ItemStatus).Name)
                                    </Template>
                                </RadzenDropDown>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>Select Category</p>
                                <RadzenDropDown AllowClear="true" Name="CategoryId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@newBlogCategory.CategoryId Placeholder="Select Category..."
                                                Style="width:100%" Data=@categoryList TextProperty="Name" ValueProperty="Id" Change=@(args => OnChange(args))>
                                    <Template>
                                        Category: @((context as Category).Name)
                                    </Template>
                                </RadzenDropDown>
                            </div>

                        </div>

                        <hr />
                        <div class="row">
                            <div class="col text-center">
                                <button type="submit" class="btn btn-primary btn-block">Add New Product</button>
                            </div>
                        </div>
                        <br />
                    </EditForm>
                    <div class="row">
                        <div class="col">
                            <button class="btn btn-secondary btn-block" @onclick="CancelDialog">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Content>

</ModalDialog>


@* Edit and Delete Modal*@

<ModalDialog @ref="_dialogEdit"
             OverlayOpacity="@(_overlayOpacity)"
             Width="@_modalWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit Product</h4>
    </Header>
    <Content>
        <div class="container">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Context="edit" Model="currentCategory" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <InputFile OnChange="@LoadFilesEdit" />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p> Name</p>
                                        <input class="form-control" @bind="CategoryName" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p>Description</p>
                                        <input class="form-control" @bind="currentCategory.Description" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>Content</p>
                                <RadzenHtmlEditor style="height: 350px; margin-bottom: 1rem;" @bind-Value="currentCategory.Content"/>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col">
                                <p>Price</p>
                                <input class="form-control" @bind="currentCategory.Price" />
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col">
                                <p>Select Item Sale Off</p>
                                <RadzenDropDown AllowClear="true" Name="ItemSaleOffId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@currentCategory.ItemSaleOffId Placeholder="Select Category..."
                                                Style="width:100%" Data=@itemSaleOffList TextProperty="Name" ValueProperty="Id" Change=@(args => OnChangeSaleOff(args))>
                                    <Template>
                                        Sale Off: @((context as ItemSaleOff).Name)
                                    </Template>
                                </RadzenDropDown>
                            </div>
                            <div class="col">
                                <p>Select Item Status</p>
                                <RadzenDropDown AllowClear="true" Name="ItemStatusId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@currentCategory.ItemStatusId Placeholder="Select Category..."
                                                Style="width:100%" Data=@itemStatusList TextProperty="Name" ValueProperty="Id" Change=@(args => OnChangeStatus(args))>
                                    <Template>
                                        Status: @((context as ItemStatus).Name)
                                    </Template>
                                </RadzenDropDown>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>Select Category</p>
                                <RadzenDropDown AllowClear="true" Name="CategoryId" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@currentCategory.CategoryId Placeholder="Select Category..."
                                                Style="width:100%" Data=@categoryList TextProperty="Name" ValueProperty="Id" Change=@(args => OnChange(args))>
                                    <Template>
                                        Category: @((context as Category).Name)
                                    </Template>
                                </RadzenDropDown>
                            </div>

                        </div>

                        <hr />
                        <div class="row">
                            <div class="col text-center">
                                <button type="submit" class="btn btn-primary btn-block">Apply Changes</button>
                            </div>
                        </div>
                        <br />
                    </EditForm>
                    <div class="row">
                        <div class="col text-center">
                            <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Content>

</ModalDialog>



@*Delete modal*@
<ModalDialog @ref="_dialogDelete"
             OverlayOpacity="@(_overlayOpacity)"
             Width="@_modalWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Delete Product</h4>
    </Header>
    <Content>
        <div class="container">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentCategory" OnValidSubmit="Delete">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col text-center">
                                <p>Are You Sure You Want To Delete This Product?</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p> Name</p>
                                        <input readonly class="form-control" @bind="currentCategory.Name" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col">
                                        <p>Description</p>
                                        <input readonly class="form-control" @bind="currentCategory.Description" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col text-center">
                                <button type="submit" class="btn btn-primary btn-block">Delete Category</button>
                            </div>
                        </div>
                        <br />
                    </EditForm>
                    <div class="row">
                        <div class="col">
                            <button class="btn btn-secondary btn-block" @onclick="CancelDeleteDialog">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Content>

</ModalDialog>


@code {
    public string active;

    protected override void OnInitialized()
    {
        GetItems();
    }


    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalWitdth = 800;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;
    public List<Models.Category> categoryList = new();
    public List<Models.ItemSaleOff> itemSaleOffList = new();
    public List<Models.ItemStatus> itemStatusList = new();
    private ModalDialog _dialog;
    private ModalDialog _dialogEdit;
    private ModalDialog _dialogDelete;
    public Models.Item currentCategory = new();
    public Models.Item tempCategory = new();

    public Models.Item newBlogCategory = new();
    public List<Models.Item> itemList = new();
    private int maxFileSize = 1024 * 15 * 15 * 15;
    public string CategoryName;
    private async Task OpenEditDialog(string slug)
    {
        currentCategory = _context.Item.FirstOrDefault(b => b.Slug == slug);
        tempCategory = currentCategory;
        CategoryName = tempCategory.Name;
        await _dialogEdit.Open();
    }
    private async Task OpenDeleteDialog(string slug)
    {
        currentCategory = _context.Item.FirstOrDefault(b => b.Slug == slug);
        tempCategory = currentCategory;
        await _dialogDelete.Open();
    }
    private async Task OpenDialog()
    {
        newBlogCategory = new();
        await _dialog.Open();
    }

    private async Task AcceptDialog()
    {
        //Dialog accepted code
        await _dialog.Close();
    }
    private async Task CancelDialog()
    {
        currentCategory = new();
        //Dialog cancelled code
        await _dialog.Close();
    }
    private async Task CancelEditDialog()
    {
        currentCategory = new();
        //Dialog cancelled code
        await _dialogEdit.Close();
    }
    private async Task CancelDeleteDialog()
    {
        currentCategory = new();
        //Dialog cancelled code
        await _dialogDelete.Close();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        using var stream = new MemoryStream();
        var file = e.File;
        var OpenSteam = file.OpenReadStream(maxFileSize);
        await OpenSteam.CopyToAsync(stream);

        newBlogCategory.ImageData = stream.ToArray();
        newBlogCategory.ContentType = e.File.ContentType;

    }

    private async Task LoadFilesEdit(InputFileChangeEventArgs e)
    {
        using var stream = new MemoryStream();
        var file = e.File;
        var OpenSteam = file.OpenReadStream(maxFileSize);
        await OpenSteam.CopyToAsync(stream);

        currentCategory.ImageData = stream.ToArray();
        currentCategory.ContentType = e.File.ContentType;

    }


    void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        newBlogCategory.CategoryId = Int32.Parse(str.ToString());
    }


    void OnChangeSaleOff(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        newBlogCategory.ItemSaleOffId = Int32.Parse(str.ToString());
    }

    void OnChangeStatus(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        newBlogCategory.ItemStatusId = Int32.Parse(str.ToString());
    }

    public async Task Add()
    {
        newBlogCategory.Slug = _slugService.URLFriendly(newBlogCategory.Name);

        if (_slugService.IsUnique(_context, newBlogCategory.Slug))
        {
            try
            {
                newBlogCategory.RateValue = 5.0;
                _context.Add(newBlogCategory);
                _context.SaveChanges();

                newBlogCategory = new();
                GetItems();
                await _dialog.Close();
                await JSRuntime.InvokeVoidAsync("AddingSuccess", null);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("SomethingWentWrong", null);
                throw;
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("DupplicateSlug", null);
        }
    }
    public async Task Edit()
    {
        var slug = _slugService.URLFriendly(CategoryName);
        if (slug != currentCategory.Slug)
        {

            if (_slugService.IsUnique(_context, slug))
            {
                try
                {
                    currentCategory.Name = CategoryName;
                    currentCategory.Slug = slug;
                    _context.Update(currentCategory);
                    _context.SaveChanges();
                    currentCategory = new();
                    GetItems();
                    await _dialogEdit.Close();
                    await JSRuntime.InvokeVoidAsync("AddingSuccess", null);

                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("SomethingWentWrong", null);
                    throw;
                }

            }
            else
            {
                await JSRuntime.InvokeVoidAsync("DupplicateSlug", null);

            }
        }
        else
        {
            try
            {
                _context.Update(currentCategory);
                _context.SaveChanges();
                currentCategory = new();
                GetItems();
                await _dialogEdit.Close();
                await JSRuntime.InvokeVoidAsync("AddingSuccess", null);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("SomethingWentWrong", null);
                throw;
            }
        }


    }


    private async Task Delete()
    {
        _context.Remove(currentCategory);


        currentCategory = new();
        GetItems();
        await _dialogDelete.Close();
        await JSRuntime.InvokeVoidAsync("AddingSuccess", null);

    }

    public void GetItems()
    {
        itemList = _context.Item
                .Include(i => i.Category)
                .Include(i => i.ItemStatus)
                .Include(i => i.ItemSaleOff)
                .Include(i => i.Rates).ToList();
        categoryList = _context.Category.ToList();
        itemStatusList = _context.ItemStatus.ToList();
        itemSaleOffList = _context.ItemSaleOff.ToList();
    }

    public void NavToggle()
    {
        if (active is null)
        {
            active = "active";
        }
        else
        {
            active = null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("runDataTable", null);
        }
    }
}
